f01e:       32 d2           eint	                         asm("eint");	             'enable interrupt'

f020:       b2 40 80 5a     mov     #23168, &0x0120 ;#0x5a80 	 WDTCTL = WDTPW | WDTHOLD;   'stop watchdog'
f024:       20 01	                                                                     'stop watchdog(continue)'

f026:       82 43 00 02     mov     #0,     &0x0200 ;r3 As==00	 localcnt = 0;		     'localcnt = 0'

f02a:       82 43 1c 00     mov     #0,     &0x001c ;r3 As==00   P1DIR = 0x00;		     'set P1 dir'

f02e:       b2 40 80 00     mov     #128,   &0x001a ;#0x0080	 P1OUT = 0x80;               'trigger up'
f032:       1a 00						                             'trigger up(continue)'

f034:       82 43 04 02     mov     #0,     &0x0204 ;r3 As==00   for(j=0; j<3; j++) {	     'loop j: mov 0 &0x0204'
f038:       1c 42 04 02     mov     &0x0204,r12     ;0x0204 	 			     'loop j: mov &0x0204 r12'
f03c:       6d 43           mov.b   #2,     r13     ;r3 As==10    			     'loop j: mov 2 r13'
f03e:       0d 9c           cmp     r12,    r13     ;            			     'loop j: cmp r12 r13 (r13-r12)'
f040:       0f 34           jge     $+32            ;abs 0xf060  			     'loop j: jump to f060 if greater or equal'

f060:       82 43 02 02     mov     #0,     &0x0202 ;r3 As==00   for(k=0; k<3; k++) {        'loop k: mov 0 &0x0202'
f064:       1c 42 02 02     mov     &0x0202,r12     ;0x0202                                  'loop k: mov &0x0202 r12'
f068:       6d 43           mov.b   #2,     r13     ;r3 As==10                               'loop k: move 2 r13'
f06a:       0d 9c           cmp     r12,    r13     ;                                        'loop k: cmp r12 r13 (r13-r12)'
f06c:       03 34           jge     $+8             ;abs 0xf074                              'loop k: jump to f074 if greater or equal'

f074:       92 53 00 02     inc     &0x0200         ;            localcnt++;                 'inc cnt'

f06e:       92 53 04 02     inc     &0x0204         ;                                        'loop j: inc j'
f072:       e2 3f           jmp     $-58            ;abs 0xf038                              'loop j: jmp back to j loop'

f078:       92 53 02 02     inc     &0x0202         ;                                        'loop k: inc k'
f07c:       f3 3f           jmp     $-24            ;abs 0xf064                              'loop k: jmp back to k loop'

f042:       92 42 00 02     mov     &0x0200,&0x0028 ;0x0200      P2OUT = localcnt;           'mov localcnt P2OUT'
f046:       28 00 						                             'mov localcnt P2OUT(continue)'

f048:       82 43 1a 00     mov     #0,     &0x001a ;r3 As==00   P1OUT = 0x00;               'trigger down'

f04c:       1d 42 26 00     mov     &0x0026,r13     ;0x0026      if (P2IN != P2OUT) {        'cmp P1IN P2OUT: mov P2IN r13'
f050:       1c 42 28 00     mov     &0x0028,r12     ;0x0028                                  'cmp P1IN P2OUT: mov P2OUT r12'
f054:       0d 9c           cmp     r12,    r13     ;                                        'cmp P1IN P2OUT: cmp r12 r13 (r13-r12)'
f056:       eb 27           jz      $-40            ;abs 0xf02e				     'cmp P1IN P2OUT: Jump to f02e if equal/zero'

f058:       b2 40 05 00     mov     #5,     &0x001a ;            P1OUT = 0x05;               'NMI enable'
f05c:       1a 00 						                             'NMI enable(continue)'
f05e:       e7 3f           jmp     $-48            ;abs 0xf02e                              'NMI enable(continue) jump to f02e'
